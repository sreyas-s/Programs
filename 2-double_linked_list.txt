#include<iostream>
using namespace std;

//double_linked_list creation

struct node{
    int data;
    struct node *next;
    struct node *prev;
};

void initializer(struct node **);
void add_to_pos(struct node **, int);
void del_from_pos(struct node **, int);
void val_of_pos(struct node **, int);
void display(struct node **);

int main(){
  struct node *head;
  initializer(&head);
  int ch, i;
  while(1){
    cout<<"What to do? \n 1. add at some position \n 2. delete from some position \n 3. value at position \n 4. display list \n 5. exit \n ";
    cin>>ch;
    switch(ch){
        case 1: cout<<"Enter the position";
                cin>>i;
                add_to_pos(&head, i);
                break;
        case 2: cout<<"Enter the position";
                cin>>i;
                del_from_pos(&head, i);
                break;
        case 3: cout<<"Enter the position";
                cin>>i;
                val_of_pos(&head, i);
                break;
        case 4: display(&head);
                break;
        case 5: return 0;
        default: cout<<"Invalid choice";
                 return 0;
    }
}
}

void initializer(struct node **headref){
    *(headref)=NULL;
}

void add_to_pos(struct node **headref, int pos){
    int n;
    if(*(headref)==NULL){
        if(pos==1){
            cout<<"Enter the data value to be inserted"<<endl;
            cin>>n;
            struct node *p=new node();
            p->data=n;
            p->next=NULL;
            p->prev=NULL;
            *headref=p;
        }
        else{
            cout<<"Cannot enter the value to this position. Out of limits. "<<endl;
        }
    }
    else{
        struct node *temp=*headref;
        int count=0;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        temp=*headref;
       //  cout<<"Number of nodes currently in list is "<<count<<endl;
        if(pos>(count+1) || pos<=0){
            cout<<"Cannot enter the value to this position. Out of limits. "<<endl;
        }
        else{
            struct node *p=new node();
            cout<<"Enter the data value to be inserted"<<endl;
            cin>>n;
            p->data=n;
            if(pos==1){
                p->next=*headref;
                p->prev=NULL;
                *headref=p;
            }
            else{
                temp=*headref;
                for(int j=1;j<=pos-2;j++){
                    temp=temp->next;
                }
                struct node *q=temp->next;
                p->prev=temp;
                p->next=q;
                if(q!=NULL){
                    q->prev=p;
                }
                temp->next=p;
            }
        }
    }
}

void del_from_pos(struct node **headref, int pos){
     if(*(headref)==NULL){
         cout<<"Cannot delete as list is empty"<<endl;
     }
     else{
         struct node *temp=*headref;
         int count=0;
         while(temp!=NULL){
             count++;
             temp=temp->next;
         }
         temp=*headref;
         if(pos==1){
             temp=temp->next;
             free(*headref);
             *headref=temp;
             temp=*headref;
         }
         else{
            temp=*headref;
            for(int j=1;j<=pos-2;j++){
                    temp=temp->next;
                }
            
            struct node *q=temp->next;
            if(q->next==NULL){
                temp->next=NULL;
            }
            else{
                temp->next=temp->next->next;
                q->next->prev=temp;
            }
            free(q);
         }
    }
}
void val_of_pos(struct node **headref, int pos){
    if(*headref==NULL){
        cout<<"list is empty"<<endl;
    }
    else{
        struct node *temp=*headref;
        int count=0;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        temp=*headref;
        if(pos>count || pos <=0){
            cout<<"out of limits"<<endl;
        }
        else{
            for(int j=1;j<=(pos-1);j++){
                    temp=temp->next;
                }
            cout<<"Value at position "<<pos<<" is "<<temp->data<<endl;
        }
    }
}
void display(struct node **headref){
    struct node *temp=*headref;
    if(temp==NULL){
        cout<<"list is empty"<<endl;
    }
    else{
        while(temp!=NULL){
            cout<<temp->data<<" ";
            temp=temp->next;
        }
        cout<<"\n";
    }
}